// Content below is autogenerated by ojster template engine
// usually there is no reason to edit it manually

goog.provide('ojster.example.templates.Person');

goog.require('ojster.example.templates.Base');
goog.require('ojster.example.templates.Hobbies');

goog.require('ojster.example.templates.Tools.SomeTool');
goog.require('ojster.example.templates.Tools.SomeOtherTool');

goog.scope(function() {

var Base = ojster.example.templates.Base;
var Hobbies = ojster.example.templates.Hobbies;
var SomeTool = ojster.example.templates.Tools.SomeTool;
var SomeOtherTool = ojster.example.templates.Tools.SomeOtherTool;

/** @constructor */
ojster.example.templates.Person = function() {
	Base.apply(this, arguments);
};
var Person = ojster.example.templates.Person;
goog.inherits(Person, Base);


// here is assumed that template will be compiled with goog.scope enabled
// some of features used will provide non-working code if goog.scope is not enabled
// i.g. function definition outside of block and using aliases

// fully qualified names cannot be used here, because node does not understand them



// usually code is enclosed into such a "tag"
function twistScore(value) {
    return value * 5 / 3;
};


// but beyond blocks code can be inserted just plain
Person.prototype.calculateScore = function(person) {
    return twistScore(person.score);
};

Person.prototype.renderBlockMain = function() { // @30:1
	var self = this;
	var d = this.data, vars = this.vars;

    // TODO bad example, need 'init' function instead
    vars.score = this.calculateScore(d); // vars is right place for template-level variables

	Base.prototype.renderBlockMain.call(self); // @35:2
}; // @36:1

// code could be here too, almost anywhere

Person.prototype.renderBlockTitle = function() { // @40:1
	var self = this;
	var d = this.data, vars = this.vars;
	self.writer.write(
		'Person #',
		self.escape(d.id) // @40:29
	);
}; // @40:40

Person.prototype.renderBlockScript = function() { // @42:1
	var self = this;
	var d = this.data, vars = this.vars;
	self.writer.write(
		'<script>'
	); // @44:1

	// seems like jslint tries to check code within 'script' tags even if it's part of string constant, so avoid it

	self.writer.write(
		'(function() {\n    // TODO good for node, but bad for goog\n    var settings = ',
		JSON.stringify(this.ctx.pageSettings), // @47:20
		'; // inserting JSON unescaped\n    ojster.example.page.initPage(settings);\n})();</script>'
	);
}; // @51:1

Person.prototype.renderBlockContent = function() { // @53:1
	var self = this;
	var d = this.data, vars = this.vars;
	self.writer.write(
		'<span>A</span><span>B</span>',
		' ',
		'<span>C</span><br />'
	); // @57:2
	self.renderBlockEcho('Hey there!'); // @57:2
	self.writer.write(
		'<div>Hello, '
	); // @58:17
	self.renderBlockFullName(); // @58:17
	self.writer.write(
		'!</div><div>Your score: ',
		self.escape(vars.score), // @59:22
		'</div><div>Your skills:</div>'
	); // @61:5
	self.renderBlockSkills(); // @61:5

	if (d.events && d.events.length) {

	self.writer.write(
		'<div>Your events:</div>'
	); // @64:9

	d.events.forEach(function(event) {

	self.renderBlockBeforeEvent(); // @65:13
	self.writer.write(
		'<div>',
		self.escape(event.Name), // @66:18
		'</div>'
	); // @67:13
	self.renderBlockAfterEvent(); // @67:13

	});


	}


	// checking whitespaces compaction:

	self.writer.write(
		'<div>-', // @72:5
		' ',
		'-</div>' // @72:19
	); // @74:5
	new Hobbies(d, this.ctx).renderTo(self); // @74:5
	new SomeTool(d).renderTo(self); // @76:5
	new SomeOtherTool(d).renderTo(self); // @77:5
}; // @78:1

Person.prototype.renderBlockFullName = function() { // @58:17
	var self = this;
	var d = this.data, vars = this.vars;
	self.writer.write(
		self.escape(d.firstName), // @58:40
		' ',
		self.escape(d.lastName) // @58:59
	);
}; // @58:76

Person.prototype.renderBlockBeforeEvent = function() { // @65:13
	var self = this;
	var d = this.data, vars = this.vars;
};

Person.prototype.renderBlockEcho = function(msg) { // @80:1
	var self = this;
	var d = this.data, vars = this.vars;
	self.writer.write(
		self.escape(msg) // @81:2
	);
}; // @82:1

Person.prototype.renderBlockSkills = function() { // @84:1
	var self = this;
	var d = this.data, vars = this.vars;

    if (vars.areSkillsRendered) {
        return;
    }

    vars.areSkillsRendered = true;

    if (!d.skills) {
        this.renderBlockNoSkills();
        return;
    }

    for (var i=0, l=d.skills.length; i < l; i++) {
        var skill = d.skills[i];

	self.renderBlockParametrized(i, l, skill); // @100:3
	self.writer.write(
		'<div>',
		self.escape(skill.name), // @103:14
		': ',
		self.escape(skill.value), // @103:33
		'</div>'
	); // @104:1

    }

}; // @107:1

Person.prototype.renderBlockParametrized = function(i, l, skill) { // @100:3
	var self = this;
	var d = this.data, vars = this.vars;
	self.writer.write(
		'<div>',
		self.escape(i), // @101:9
		' of ',
		self.escape(l), // @101:21
		' is &quot;',
		self.escape(skill.name), // @101:39
		'&quot;</div>'
	);
}; // @102:3

Person.prototype.renderBlockNoSkills = function() { // @109:1
	var self = this;
	var d = this.data, vars = this.vars;
	self.writer.write(
		'<div>You have no skills :(</div>'
	);
}; // @111:1

Person.prototype.renderBlockAfterEvent = function() { // @113:1
	var self = this;
	var d = this.data, vars = this.vars;
};

}); // goog.scope
