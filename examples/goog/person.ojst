<% @require ojster.example.page %>
<% @require ojster.example.templates.Base %>
<% @require ojster.example.templates.Hobbies %>

<% @template ojster.example.templates.Person %>
<% @inherits ojster.example.templates.Base %>

<%
// usually code is enclosed into such a "tag"
ojster.example.templates.Person.twistScore = function (value) {
    return value * 5 / 3;
};
%>

// but beyond blocks code can be inserted just plain
ojster.example.templates.Person.prototype.calculateScore = function(person) {
    return ojster.example.templates.Person.twistScore(person.score);
};

<% @block main { %>
<%
    // TODO bad example, need 'init' function instead
    vars.score = this.calculateScore(d); // vars is right place for template-level variables
    ojster.example.templates.Base.prototype.renderBlockMain();
%>
<% @block main } %>

// code could be here too, almost anywhere

<% @block title { %>Person #<%= d.id %><% @block title } %>

<% @block script { %>
<%-'<'%>script> // seems like jslint tries to check code within 'script' tags even if it's part of string constant, so avoid it
(function() {
    // TODO good for node, but bad for goog
    var settings = <%- JSON.stringify(ctx.pageSettings) %>; // inserting JSON unescaped
    ojster.example.page.initPage(settings);
})();
</script>
<% @block script } %>

<% @block content { %>
    <div>Hello, <% @block fullName { %><%= d.firstName %> <%= d.lastName %><% @block fullName } %>!</div>
    <div>Your score: <%= vars.score %></div>
    <div>Your skills, <% this.renderBlockFullName(); %>:</div>
    <% this.renderBlockSkills(); %>
    <% if (d.events && d.events.length) { %>
        <div>Your events:</div>
        <% d.events.forEach(function(event) { %>
            <% @block beforeEvent {} %>
            <div><%= event.Name %></div>
            <% self.renderBlockAfterEvent(); // 'self' alias of 'this' can be used when needed %>
        <% }); %>
    <% } %>

    <% // checking whitespaces compaction: %>
    <%-'-'%> <%-'-'%>

    <%
    var Hobbies = ojster.example.templates.Hobbies; // just an alias

    // how to render other template in place:
    new Hobbies(this.ctx, d).renderTo(this);
    %>
    <% // possible but less effective: %>
    <%- new Hobbies(this.ctx, d).render() %>
<% @block content } %>

<% @block skills { %>
<%
    if (vars.areSkillsRendered) {
        return;
    }

    vars.areSkillsRendered = true;

    if (!d.skills) {
        this.renderBlockNoSkills();
        return;
    }

    for (var i=0, l=d.skills.length; i < l; i++) {
        var skill = skills[i];
%>
        <div><%= skill.name %>: <%= skill.value %></div>
<%
    }
%>
<% @block skills } %>

<% @block noSkills { %>
    You have no skills :(
<% @block noSkills } %>

<% @block afterEvent {} %>
